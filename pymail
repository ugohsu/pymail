#!/usr/bin/env python3

## パッケージの読み込み

# メール本文の作成
from email.mime.text import MIMEText

# 添付ファイルの読み込み
from email.mime.application import MIMEApplication

# 添付ファイルの結合
from email.mime.multipart import MIMEMultipart

# その他のパッケージ
import sys, os, re, json, smtplib, gnupg, argparse, subprocess

## 関数

# contents を送信先等の情報と本文とに分割する
def parseContents(contents):

    # メールのメッセージの作成
    msg = MIMEMultipart()

    # 情報と本文の分割点
    seprow = contents.index("\n")

    # 本文の追加
    msg.attach(MIMEText("".join(contents[(seprow + 1):])))

    # 情報の取得
    info = [x.strip() for x in contents[:seprow]]

    for x in info:
        if re.match(r"^To: ", x):
            msg["To"] = re.sub(r"^To: ", "", x)
        elif re.match(r"^Cc: ", x):
            msg["Cc"] = re.sub(r"^Cc: ", "", x)
        elif re.match(r"^Bcc: ", x):
            msg["Bcc"] = re.sub(r"^Bcc: ", "", x)
        elif re.match(r"^Subject: ", x):
            msg["Subject"] = re.sub(r"^Subject: ", "", x)
        elif re.match(r"^File: ", x):
            # 複数ファイルの場合にはパスをコンマでつなぐ
            fileList = re.sub(r"^File: ", "", x).split(",")
            for fle in fileList:
                # パスの補完
                path = os.path.abspath(os.path.expanduser(fle))
                base = os.path.basename(path)
                # ファイルの取得
                with open(path, "rb") as rf:
                    part = MIMEApplication(
                        rf.read(),
                        Name = base
                    )
                # ファイル情報の整理 
                part['Content-Disposition'] = \
                    f'attachment; filename="{base}"'
                # メッセージに追加
                msg.attach(part)

    return msg

# メールアカウント情報の取得
def getAccount(path):
    
    # 設定ファイルの読み込み
    path = os.path.expanduser(path)
    gpg = gnupg.GPG()
    with open(path, "rb") as rf:
        decrypted = gpg.decrypt_file(rf).data

        # decrypted が空の場合には直接 "gpg -d" を呼び出す
        if not decrypted:
            decrypted = subprocess.run(["gpg", "-d", path], capture_output = True).stdout
            
        account = json.loads(decrypted.decode("utf8"))

    return account

# メールの送信
def sendMail(account, msg):

    # 送信元の入力
    msg["From"] = account["from"]

    # メールの送信
    server = smtplib.SMTP(account["host"], account["port"])
    server.starttls()
    server.login(account["from"], account["password"])
    server.send_message(msg)
    server.quit()

# contents が含まれるファイルを開く関数
def openFiles(paths):
    for path in paths:
        with open(path, "r") as rf:
            yield rf.readlines()

## 実行

if __name__ == "__main__":

    # 引数の設定
    p = argparse.ArgumentParser()

    # contents file
    p.add_argument(
        "--file", "-f",
        nargs = "+",  # 複数ファイルをリストの形で受け取る
        default = None,
        help = "メールの情報 (宛先など) および本文に関するファイルを指定する"
    )

    # config file path
    p.add_argument(
        "--config", "-c",
        default = "~/.pymailconf",
        help = "config ファイル (gnupg で暗号化された json ファイル) を指定する (デフォルトは ~/.pymailconf)"
    )

    args = p.parse_args()

    # アカウント情報の読み込み
    account = getAccount(args.config)

    # contents の読み込み
    if args.file:
        contentsList = openFiles(args.file)
    else:
        contentsList = [sys.stdin.readlines()]

    # file に指定したすべてのメールを送信する
    for contents in contentsList:

        # メッセージの作成
        msg = parseContents(contents)

        # メールの送信
        sendMail(account, msg)

        # 送信情報の表示
        print(f'{msg["To"]} に「{msg["Subject"]}」を送信しました。')
